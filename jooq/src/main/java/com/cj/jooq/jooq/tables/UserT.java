/*
 * This file is generated by jOOQ.
*/
package com.cj.jooq.jooq.tables;


import com.cj.jooq.jooq.Indexes;
import com.cj.jooq.jooq.Keys;
import com.cj.jooq.jooq.Test;
import com.cj.jooq.jooq.tables.records.UserTRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserT extends TableImpl<UserTRecord> {

    private static final long serialVersionUID = 1300353868;

    /**
     * The reference instance of <code>test.user_t</code>
     */
    public static final UserT USER_T = new UserT();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserTRecord> getRecordType() {
        return UserTRecord.class;
    }

    /**
     * The column <code>test.user_t.id</code>.
     */
    public final TableField<UserTRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>test.user_t.user_name</code>.
     */
    public final TableField<UserTRecord, String> USER_NAME = createField("user_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>test.user_t.password</code>.
     */
    public final TableField<UserTRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>test.user_t.age</code>.
     */
    public final TableField<UserTRecord, Integer> AGE = createField("age", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>test.user_t</code> table reference
     */
    public UserT() {
        this(DSL.name("user_t"), null);
    }

    /**
     * Create an aliased <code>test.user_t</code> table reference
     */
    public UserT(String alias) {
        this(DSL.name(alias), USER_T);
    }

    /**
     * Create an aliased <code>test.user_t</code> table reference
     */
    public UserT(Name alias) {
        this(alias, USER_T);
    }

    private UserT(Name alias, Table<UserTRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserT(Name alias, Table<UserTRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_T_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserTRecord> getPrimaryKey() {
        return Keys.KEY_USER_T_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserTRecord>> getKeys() {
        return Arrays.<UniqueKey<UserTRecord>>asList(Keys.KEY_USER_T_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserT as(String alias) {
        return new UserT(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserT as(Name alias) {
        return new UserT(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserT rename(String name) {
        return new UserT(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserT rename(Name name) {
        return new UserT(name, null);
    }
}
