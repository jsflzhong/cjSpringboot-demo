/*
 * This file is generated by jOOQ.
*/
package com.cj.jooq.jooq.tables;


import com.cj.jooq.jooq.Indexes;
import com.cj.jooq.jooq.Keys;
import com.cj.jooq.jooq.Test;
import com.cj.jooq.jooq.tables.records.UUserRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UUser extends TableImpl<UUserRecord> {

    private static final long serialVersionUID = -357958499;

    /**
     * The reference instance of <code>test.u_user</code>
     */
    public static final UUser U_USER = new UUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UUserRecord> getRecordType() {
        return UUserRecord.class;
    }

    /**
     * The column <code>test.u_user.id</code>.
     */
    public final TableField<UUserRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>test.u_user.userName</code>. 用户登录名
     */
    public final TableField<UUserRecord, String> USERNAME = createField("userName", org.jooq.impl.SQLDataType.VARCHAR(80), this, "用户登录名");

    /**
     * The column <code>test.u_user.realname</code>. 用户真实姓名
     */
    public final TableField<UUserRecord, String> REALNAME = createField("realname", org.jooq.impl.SQLDataType.VARCHAR(20), this, "用户真实姓名");

    /**
     * The column <code>test.u_user.email</code>. 邮箱|登录帐号
     */
    public final TableField<UUserRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR(128), this, "邮箱|登录帐号");

    /**
     * The column <code>test.u_user.password</code>. 密码
     */
    public final TableField<UUserRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(32), this, "密码");

    /**
     * The column <code>test.u_user.last_login_time</code>. 最后登录时间
     */
    public final TableField<UUserRecord, LocalDateTime> LAST_LOGIN_TIME = createField("last_login_time", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "最后登录时间");

    /**
     * The column <code>test.u_user.status</code>. 1:有效，0:禁止登录
     */
    public final TableField<UUserRecord, Long> STATUS = createField("status", org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.BIGINT)), this, "1:有效，0:禁止登录");

    /**
     * The column <code>test.u_user.salt</code>. 加密密码的盐
     */
    public final TableField<UUserRecord, String> SALT = createField("salt", org.jooq.impl.SQLDataType.VARCHAR(50), this, "加密密码的盐");

    /**
     * The column <code>test.u_user.age</code>.
     */
    public final TableField<UUserRecord, Integer> AGE = createField("age", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>test.u_user.create_time</code>. 创建时间
     */
    public final TableField<UUserRecord, LocalDateTime> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "创建时间");

    /**
     * The column <code>test.u_user.create_by</code>. 创建人id
     */
    public final TableField<UUserRecord, String> CREATE_BY = createField("create_by", org.jooq.impl.SQLDataType.VARCHAR(32), this, "创建人id");

    /**
     * The column <code>test.u_user.update_time</code>. 修改时间
     */
    public final TableField<UUserRecord, LocalDateTime> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "修改时间");

    /**
     * The column <code>test.u_user.update_by</code>. 修改人id
     */
    public final TableField<UUserRecord, String> UPDATE_BY = createField("update_by", org.jooq.impl.SQLDataType.VARCHAR(32), this, "修改人id");

    /**
     * Create a <code>test.u_user</code> table reference
     */
    public UUser() {
        this(DSL.name("u_user"), null);
    }

    /**
     * Create an aliased <code>test.u_user</code> table reference
     */
    public UUser(String alias) {
        this(DSL.name(alias), U_USER);
    }

    /**
     * Create an aliased <code>test.u_user</code> table reference
     */
    public UUser(Name alias) {
        this(alias, U_USER);
    }

    private UUser(Name alias, Table<UUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private UUser(Name alias, Table<UUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.U_USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UUserRecord> getPrimaryKey() {
        return Keys.KEY_U_USER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UUserRecord>> getKeys() {
        return Arrays.<UniqueKey<UUserRecord>>asList(Keys.KEY_U_USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UUser as(String alias) {
        return new UUser(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UUser as(Name alias) {
        return new UUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UUser rename(String name) {
        return new UUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UUser rename(Name name) {
        return new UUser(name, null);
    }
}
